freq = word_counts$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
# Tokenize the column into words:  female last author:
word_counts = df_long %>% filter(Gender == 'female', author_last == 1) %>%
count(keyword, sort = TRUE)            # count frequencies
# Tokenize the column into words:  female last author:
subset = df_long %>% filter(Gender == 'male', author_last == 1)
subset = data.frame(text = subset$keyword, stringsAsFactors = FALSE)
word_counts = subset %>% count(text, sort = TRUE)            # count frequencies
wordcloud(
words = word_counts$text,
freq = word_counts$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
#| id: preprocess
#| eval: true
#| output: asis
source('scripts/load_scopus_datasets.R') # Creates full_names dataset
source('scripts/attribute_country.R') # Add country affiliations
source('scripts/attribute_gender.R') # Adds gender attributions (precalculated with API)
source('scripts/create_keys.R') # Add keys for authors and study+author
source('scripts/clean_citations_and_OA.R') # Process citations and OA status
source('scripts/attribute_gender_diagnostics.R') # Process citations and OA status
source('scripts/export_gender_data.R')
# Looking at keywords
df$AUTHOR_KEYWORDS = tolower(df$AUTHOR_KEYWORDS)
x = df$AUTHOR_KEYWORDS
max_splits = max(lengths(strsplit(x, ";")))+20
x_wide = df %>% select(CATEGORY:full_name, Gender,author_order,author_last,AUTHOR_KEYWORDS) %>%
separate(AUTHOR_KEYWORDS,
into = paste0("keyword", 1:max_splits),
sep = c(";"), # "[; ]"
fill = "right")
df_long <- x_wide %>%
pivot_longer(
cols = starts_with("keyword"),   # select columns to melt
names_to = "keyword_no",       # new column for former column names
values_to = "keyword"          # new column for cell values
)
df_long         = df_long %>% na.omit(keyword)%>% filter(keyword != "")
df_long$keyword = trimws(df_long$keyword)
# Tokenize the column into words: all:
word_counts = df_long %>%
count(keyword, sort = TRUE)            # count frequencies
# Create the word cloud
set.seed(123) # reproducibility
wordcloud(
words = word_counts$keyword,
freq = word_counts$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2")
)
wordcloud(
words = word_counts$keyword,
freq = word_counts$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2")
)
# Male first author:
subset = df_long %>% filter(Gender == 'male', author_order == 1)
wordcloud(
words = word_counts$keyword,
freq = word_counts$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2")
)
View(word_counts)
# Tokenize the column into words: all:
subset = data.frame(text = df_long$keyword, stringsAsFactors = FALSE)
word_counts = subset %>%   count(text, sort = TRUE)            # count frequencies
wordcloud(
words = word_counts$text,
freq = word_counts$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
# Tokenize the column into words: all:
all = data.frame(text = df_long$keyword, stringsAsFactors = FALSE)
word_counts = all %>%   count(text, sort = TRUE)            # count frequencies
wordcloud(
words = word_counts$text,
freq = word_counts$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
View(word_counts)
# Male first author:
subset = df_long %>% filter(Gender == 'male', author_order == 1)
subset = data.frame(text = subset$keyword, stringsAsFactors = FALSE)
word_counts = subset %>%   count(text, sort = TRUE)            # count frequencies
wordcloud(
words = word_counts$text,
freq = word_counts$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
# Tokenize the column into words:  female first author:
subset = df_long %>% filter(Gender == 'female', author_order == 1)
subset = data.frame(text = subset$keyword, stringsAsFactors = FALSE)
word_counts = subset %>%   count(text, sort = TRUE)            # count frequencies
wordcloud(
words = word_counts$text,
freq = word_counts$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
head(word_counts)
head(word_counts)
head(word_counts)
subset = df_long %>% filter(Gender == 'female', author_order == 1)
subset = data.frame(text = subset$keyword, stringsAsFactors = FALSE)
word_counts = subset %>%   count(text, sort = TRUE)            # count frequencies
wordcloud(
words = word_counts$text,
freq = word_counts$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
head(word_counts)
# Male first author:
subset = df_long %>% filter(Gender == 'male', author_order == 1)
subset = data.frame(text = subset$keyword, stringsAsFactors = FALSE)
word_counts = subset %>%   count(text, sort = TRUE)            # count frequencies
wordcloud(
words = word_counts$text,
freq = word_counts$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
head(word_counts)
subset = df_long %>% filter(Gender == 'male', author_last == 1)
subset = data.frame(text = subset$keyword, stringsAsFactors = FALSE)
word_counts = subset %>% count(text, sort = TRUE)            # count frequencies
wordcloud(
words = word_counts$text,
freq = word_counts$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
head(word_counts)
# Tokenize the column into words:  female last author:
subset = df_long %>% filter(Gender == 'female', author_last == 1)
subset = data.frame(text = subset$keyword, stringsAsFactors = FALSE)
word_counts = subset %>% count(text, sort = TRUE)            # count frequencies
wordcloud(
words = word_counts$text,
freq = word_counts$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
head(word_counts)
View(df_long)
word_counts = df_long %>%
group_by(Gender, author_order, author_last) %>%  # group by your two conditions
count(keyword, sort = TRUE)      # count words within each group
word_counts
word_counts = df_long %>%
filter(author_order == 1  | author_last == 1 )
word_counts
word_counts = df_long %>%
filter(author_order == 1  | author_last == 1 ) %>%
group_by(Gender, author_order, author_last) %>%  # group by your two conditions
count(keyword, sort = TRUE)      # count words within each group
word_counts
word_counts = df_long %>%
filter(author_order == 1  | author_last == 1 ) %>%
group_by(Gender, author_order, author_last) %>%  # group by your two conditions
count(keyword, sort = TRUE) %>%      # count words within each group
filter(n > 5)
word_counts
View(word_counts)
word_counts
word_counts = df_long %>%
filter(author_order == 1  | author_last == 1 ) %>%
group_by(Gender, author_order, author_last) %>%  # group by your two conditions
count(keyword, sort = TRUE) %>%      # count words within each group
slice_max(n, n = 5, with_ties = TRUE) %>%   # take top 5 per group (include ties)
ungroup()
word_counts
View(word_counts)
df_long_temp = df_long %>% mutate(author_first = ifelse(author_order > threshold, 0, author_order))
df_long_temp = df_long %>% mutate(author_first = ifelse(author_order > 1, 0, author_order))
View(df_long_temp)
word_counts = df_long %>%
filter(author_first == 1  | author_last == 1 ) %>%
group_by(Gender, author_order, author_last) %>%  # group by your two conditions
count(keyword, sort = TRUE) %>%      # count words within each group
slice_max(n, n = 5, with_ties = TRUE) %>%   # take top 5 per group (include ties)
ungroup()
word_counts = df_long_temp %>%
filter(author_first == 1  | author_last == 1 ) %>%
group_by(Gender, author_order, author_last) %>%  # group by your two conditions
count(keyword, sort = TRUE) %>%      # count words within each group
slice_max(n, n = 5, with_ties = TRUE) %>%   # take top 5 per group (include ties)
ungroup()
word_counts
View(word_counts)
word_counts = df_long_temp %>%
filter(author_first == 1  | author_last == 1 ) %>%
group_by(Gender, author_first, author_last) %>%  # group by your two conditions
count(keyword, sort = TRUE) %>%      # count words within each group
slice_max(n, n = 5, with_ties = TRUE) %>%   # take top 5 per group (include ties)
ungroup()
View(word_counts)
# First tidy up the keywords
df$AUTHOR_KEYWORDS = tolower(df$AUTHOR_KEYWORDS)
# Then split up keywords
max_splits = max(lengths(strsplit(df$AUTHOR_KEYWORDS, ";")))+20
df_kw      = df %>% select(CATEGORY:full_name, Gender,author_order,author_last,AUTHOR_KEYWORDS) %>%
separate(AUTHOR_KEYWORDS,
into = paste0("keyword", 1:max_splits),
sep = c(";"),      # "[; ]" if you want to spilt into separate words
fill = "right")
# Melt down so all keywords are in one column
df_kw = df_kw %>% pivot_longer(cols = starts_with("keyword"),
names_to = "keyword_no",
values_to = "keyword")
df_kw         = df_kw %>% na.omit(keyword)%>% filter(keyword != "")
df_kw$keyword = trimws(df_kw$keyword)
View(df_kw)
word_counts = all %>%   count(df_kw$keyword, sort = TRUE)            # count frequencies
View(word_counts)
head(word_counts)
wordcloud(
words = word_counts$text,
freq = word_counts$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
wordcloud(
words = word_counts$text,
freq = word_counts$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
wordcloud(
words = word_counts$df_kw$keyword,
freq = word_counts$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
# Tokenize the column into words: all:
word_counts = df_kw$ %>% count(keyword, sort = TRUE)            # count frequencies
# Tokenize the column into words: all:
word_counts = df_kw %>% count(keyword, sort = TRUE)            # count frequencies
# Tokenize the column into words: all:
word_counts = df_kw %>% ungroup() %>% count(keyword, sort = TRUE)            # count frequencies
View(word_counts)
head(word_counts)
wordcloud(
words = word_counts$keyword,
freq = word_counts$n,
min.freq = 1,
max.words = 400,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
wordcloud(
words = word_counts$keyword,
freq = word_counts$n,
min.freq = 1,
max.words = 400,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
# Male first author:
word_counts_male1 = df_kw %>% filter(Gender == 'male', author_order == 1) %>%
ungroup() %>% count(keyword, sort = TRUE)
# Male first author:
word_counts_male1 = df_kw %>% filter(Gender == 'male', author_order == 1) %>%
ungroup() %>% count(keyword, sort = TRUE)
head(word_counts_male1)
wordcloud(
words = word_counts_male1$text,
freq = word_counts_male1$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
wordcloud(
words = word_counts_male1$keyword,
freq = word_counts_male1$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
# Tokenize the column into words:  female first author:
word_counts_female1 = df_kw %>% filter(Gender == 'female', author_order == 1) %>%
ungroup() %>% count(keyword, sort = TRUE)
head(word_counts_female1)
wordcloud(
words = word_counts_male1$keyword,
freq = word_counts_male1$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
wordcloud(
words = word_counts_female1$keyword,
freq = word_counts_female1$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
#--------------
# Tokenize the column into words:  male last author:
word_counts_malelast = df_kw %>% filter(Gender == 'male', author_last == 1) %>%
ungroup() %>% count(keyword, sort = TRUE)
head(word_counts_malelast)
wordcloud(
words = word_counts_malelast$keyword,
freq = word_counts_malelast$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
# Tokenize the column into words:  female last author:
word_counts_femalelast = df_kw %>% filter(Gender == 'female', author_last == 1) %>%
ungroup() %>% count(keyword, sort = TRUE)
head(word_counts_femalelast)
wordcloud(
words = word_counts_femalelast$keyword,
freq = word_counts_femalelast$n,
min.freq = 1,
max.words = 100,
random.order = FALSE,
colors = brewer.pal(8, "Dark2"))
df_long_temp = df_long %>% mutate(author_first = ifelse(author_order > 1, 0, author_order))
word_counts = df_long_temp %>%
filter(author_first == 1  | author_last == 1 ) %>%
group_by(Gender, author_first, author_last) %>%  # group by your two conditions
count(keyword, sort = TRUE) %>%      # count words within each group
slice_max(n, n = 5, with_ties = TRUE) %>%   # take top 5 per group (include ties)
ungroup()
word_counts
View(word_counts)
word_counts$label = paste0(word_counts$Gender, word_counts$author_first,word_counts$author_last)
View(word_counts)
? pivot_wider
test = word_counts %>% select(keyword:label) %>% pivot_wider(id_cols = keywod, names_from=label)
test = word_counts %>% select(keyword:label) %>% pivot_wider(id_cols = keywod, names_from=label,values_from = n)
test = word_counts %>% select(keyword:label) %>% pivot_wider(id_cols = keyword, names_from=label,values_from = n)
View(test)
View(test)
test = word_counts %>% select(keyword:label) %>% pivot_wider(id_cols = n, names_from=label,values_from = keyword)
View(word_counts)
seq(1,5)
word_counts$rank = rep(seq(1,5),4)
View(word_counts)
word_counts = df_long_temp %>%
filter(author_first == 1  | author_last == 1 ) %>%
group_by(Gender, author_first, author_last, keyword) %>%
summarise(n = n(), .groups = "drop_last") %>%   # word counts per group
arrange(Gender, author_first, author_last, desc(n)) %>%            # sort inside groups
mutate(rank = row_number()) %>%                 # rank within each group
filter(rank <= 5)
View(word_counts)
word_counts$label = paste0(word_counts$Gender, word_counts$author_first,word_counts$author_last)
test = word_counts %>% select(keyword:label) %>% pivot_wider(id_cols = rank, names_from=label,values_from = keyword)
test = word_counts %>% ungroup() %>% select(keyword:label) %>% pivot_wider(id_cols = rank, names_from=label,values_from = keyword)
View(test)
word_counts = df_long_temp %>%
filter(author_first == 1  | author_last == 1 ) %>%
group_by(Gender, author_first, author_last, keyword) %>%
summarise(n = n(), .groups = "drop_last") %>%   # word counts per group
arrange(Gender, author_first, author_last, desc(n)) %>%            # sort inside groups
mutate(rank = row_number()) %>%                 # rank within each group
filter(rank <= 20)
word_counts$label = paste0(word_counts$Gender, word_counts$author_first,word_counts$author_last)
test = word_counts %>% ungroup() %>% select(keyword:label) %>% pivot_wider(id_cols = rank, names_from=label,values_from = keyword)
names(test)
names(test) = c('rank','female_lastauthor','female_1stauthor','male_lastauthor','male_firstauthor')
test = test %>% select(female_1stauthor,male_firstauthor,female_lastauthor,male_lastauthor)
View(test)
test = word_counts %>% ungroup() %>% select(keyword:label) %>% pivot_wider(id_cols = rank, names_from=label,values_from = keyword)
names(test) = c('rank','female_lastauthor','female_1stauthor','male_lastauthor','male_firstauthor')
test = test %>% select(rankfemale_1stauthor,male_firstauthor,female_lastauthor,male_lastauthor)
test = test %>% select(rank,female_1stauthor,male_firstauthor,female_lastauthor,male_lastauthor)
View(test)
source("~/Documents/Research/WEIRD_author_gender/key_word_analysis.R")
#| id: preprocess
#| eval: true
#| output: asis
source('scripts/load_scopus_datasets.R') # Creates full_names dataset
source('scripts/attribute_country.R') # Add country affiliations
source('scripts/attribute_gender.R') # Adds gender attributions (precalculated with API)
source('scripts/create_keys.R') # Add keys for authors and study+author
source('scripts/clean_citations_and_OA.R') # Process citations and OA status
source('scripts/attribute_gender_diagnostics.R') # Process citations and OA status
source('scripts/export_gender_data.R')
# First tidy up the keywords
df$AUTHOR_KEYWORDS = tolower(df$AUTHOR_KEYWORDS)
# Then split up keywords
max_splits = max(lengths(strsplit(df$AUTHOR_KEYWORDS, ";")))+20
df_kw      = df %>% select(CATEGORY:full_name, Gender,author_order,author_last,AUTHOR_KEYWORDS) %>%
separate(AUTHOR_KEYWORDS,
into = paste0("keyword", 1:max_splits),
sep = c(";"),      # "[; ]" if you want to spilt into separate words
fill = "right")
gender_in_mp_exported <- read.csv("~/Documents/Research/WEIRD_author_gender/gender_in_music_psych/data/gender_in_mp_exported.csv")
View(gender_in_mp_exported)
# First tidy up the keywords
df$AUTHOR_KEYWORDS = tolower(df$AUTHOR_KEYWORDS)
df = read.csv("~/Documents/Research/WEIRD_author_gender/gender_in_music_psych/data/gender_in_mp_exported.csv")
# First tidy up the keywords
df$AUTHOR_KEYWORDS = tolower(df$AUTHOR_KEYWORDS)
# Then split up keywords
max_splits = max(lengths(strsplit(df$AUTHOR_KEYWORDS, ";")))+20
df_kw      = df %>% select(CATEGORY:full_name, Gender,author_order,author_last,AUTHOR_KEYWORDS) %>%
separate(AUTHOR_KEYWORDS,
into = paste0("keyword", 1:max_splits),
sep = c(";"),      # "[; ]" if you want to spilt into separate words
fill = "right")
df_kw      = df %>% select(BIBTEXKEY:full_name, Gender,author_order,author_last,AUTHOR_KEYWORDS) %>%
separate(AUTHOR_KEYWORDS,
into = paste0("keyword", 1:max_splits),
sep = c(";"),      # "[; ]" if you want to spilt into separate words
fill = "right")
# Melt down so all keywords are in one column (and clean, rm empty cells)
df_kw = df_kw %>% pivot_longer(cols = starts_with("keyword"),
names_to = "keyword_no",
values_to = "keyword")
df_kw         = df_kw %>% na.omit(keyword) %>% filter(keyword != "")
df_kw$keyword = trimws(df_kw$keyword)
# Tokenize the column into words: all:
word_counts = df_kw %>% ungroup() %>% count(keyword, sort = TRUE)            # count frequencies
head(word_counts)
# Male first author:
word_counts_male1 = df_kw %>% filter(Gender == 'male', author_order == 1) %>%
ungroup() %>% count(keyword, sort = TRUE)
head(word_counts_male1)
# Female first author:
word_counts_female1 = df_kw %>% filter(Gender == 'female', author_order == 1) %>%
ungroup() %>% count(keyword, sort = TRUE)
head(word_counts_female1)
#--------------
# Tokenize the column into words:  male last author:
word_counts_malelast = df_kw %>% filter(Gender == 'male', author_last == 1) %>%
ungroup() %>% count(keyword, sort = TRUE)
head(word_counts_malelast)
# Tokenize the column into words:  female last author:
word_counts_femalelast = df_kw %>% filter(Gender == 'female', author_last == 1) %>%
ungroup() %>% count(keyword, sort = TRUE)
head(word_counts_femalelast)
# Rearrange to get a nicer table:
df_kw = df_kw %>% mutate(author_first = ifelse(author_order > 1, 0, author_order))
word_counts = df_long_temp %>%
filter(author_first == 1  | author_last == 1 ) %>%
group_by(Gender, author_first, author_last, keyword) %>%
summarise(n = n(), .groups = "drop_last") %>%   # word counts per group
arrange(Gender, author_first, author_last, desc(n)) %>%            # sort inside groups
mutate(rank = row_number()) %>%                 # rank within each group
filter(rank <= 20)
word_counts = df_kw %>%
filter(author_first == 1  | author_last == 1 ) %>%
group_by(Gender, author_first, author_last, keyword) %>%
summarise(n = n(), .groups = "drop_last") %>%   # word counts per group
arrange(Gender, author_first, author_last, desc(n)) %>%            # sort inside groups
mutate(rank = row_number()) %>%                 # rank within each group
filter(rank <= 20)
word_counts
word_counts$label = paste0(word_counts$Gender, word_counts$author_first,word_counts$author_last)
test = word_counts %>% ungroup() %>% select(keyword:label) %>% pivot_wider(id_cols = rank, names_from=label,values_from = keyword)
names(test) = c('rank','female_lastauthor','female_1stauthor','male_lastauthor','male_firstauthor')
test = test %>% select(rank,female_1stauthor,male_firstauthor,female_lastauthor,male_lastauthor)
test
View(word_counts)
# Plot word clouds?
ggplot(word_counts, aes(label = keyword, size = n)) +
geom_text_wordcloud() +
scale_size_area(max_size = 15) +
facet_wrap(~label) +
theme_minimal()
? geom_text_wordcloud
?? geom_text_wordcloud
install.packages("ggwordcloud")
library(ggwordcloud)
# Plot word clouds?
ggplot(word_counts, aes(label = keyword, size = n)) +
geom_text_wordcloud() +
scale_size_area(max_size = 15) +
facet_wrap(~label) +
theme_minimal()
library(xfun)
# Plot word clouds?
ggplot(word_counts, aes(label = keyword, size = n)) +
geom_text_wordcloud() +
scale_size_area(max_size = 15) +
facet_wrap(~label) +
theme_minimal()
packageVersion("xfun")
source("~/Documents/Research/WEIRD_author_gender/key_word_analysis.R")
